package com.andrei.template.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_whatsmyip".
*/
public class Table_WhatsMyIpPOJODao extends AbstractDao<Table_WhatsMyIpPOJO, Long> {

    public static final String TABLENAME = "table_whatsmyip";

    /**
     * Properties of entity Table_WhatsMyIpPOJO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property YourFuckingIPAddress = new Property(1, String.class, "YourFuckingIPAddress", false, "YOUR_FUCKING_IPADDRESS");
        public final static Property YourFuckingLocation = new Property(2, String.class, "YourFuckingLocation", false, "YOUR_FUCKING_LOCATION");
        public final static Property YourFuckingHostname = new Property(3, String.class, "YourFuckingHostname", false, "YOUR_FUCKING_HOSTNAME");
        public final static Property YourFuckingISP = new Property(4, String.class, "YourFuckingISP", false, "YOUR_FUCKING_ISP");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
    };


    public Table_WhatsMyIpPOJODao(DaoConfig config) {
        super(config);
    }
    
    public Table_WhatsMyIpPOJODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_whatsmyip\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"YOUR_FUCKING_IPADDRESS\" TEXT," + // 1: YourFuckingIPAddress
                "\"YOUR_FUCKING_LOCATION\" TEXT," + // 2: YourFuckingLocation
                "\"YOUR_FUCKING_HOSTNAME\" TEXT," + // 3: YourFuckingHostname
                "\"YOUR_FUCKING_ISP\" TEXT," + // 4: YourFuckingISP
                "\"DATE\" INTEGER);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_whatsmyip\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Table_WhatsMyIpPOJO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String YourFuckingIPAddress = entity.getYourFuckingIPAddress();
        if (YourFuckingIPAddress != null) {
            stmt.bindString(2, YourFuckingIPAddress);
        }
 
        String YourFuckingLocation = entity.getYourFuckingLocation();
        if (YourFuckingLocation != null) {
            stmt.bindString(3, YourFuckingLocation);
        }
 
        String YourFuckingHostname = entity.getYourFuckingHostname();
        if (YourFuckingHostname != null) {
            stmt.bindString(4, YourFuckingHostname);
        }
 
        String YourFuckingISP = entity.getYourFuckingISP();
        if (YourFuckingISP != null) {
            stmt.bindString(5, YourFuckingISP);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Table_WhatsMyIpPOJO readEntity(Cursor cursor, int offset) {
        Table_WhatsMyIpPOJO entity = new Table_WhatsMyIpPOJO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // YourFuckingIPAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // YourFuckingLocation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // YourFuckingHostname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // YourFuckingISP
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Table_WhatsMyIpPOJO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYourFuckingIPAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYourFuckingLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYourFuckingHostname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYourFuckingISP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Table_WhatsMyIpPOJO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Table_WhatsMyIpPOJO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
